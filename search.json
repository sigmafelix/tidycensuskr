[{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v01_intro.html","id":"get-started","dir":"Articles","previous_headings":"","what":"Get Started","title":"Introduction to tidycensuskr","text":"Data retrieval functions Geographic boundary functions Data transformation utilities Visualisation helpers","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v01_intro.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data Structure","title":"Introduction to tidycensuskr","text":"censuskor main dataset containing census data. data(censuskor) loads dataset. details, refer censuskor documentation running ?censuskor R. Currently package supports district(municipal)-level (Si-Gun-Gu) level data Geographic boundary","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v01_intro.html","id":"understanding-korean-geographic-hierarchies","dir":"Articles","previous_headings":"","what":"1. Understanding Korean Geographic Hierarchies","title":"Introduction to tidycensuskr","text":"Korea, three major levels geographic hierarchy administrative purposes: Metropolitan cities treated provinces. States/Special Self-Governing Province: another name hierarchy Jeju-, Gangwon-, Jeollabuk-. names used following statute giving special status provinces. Si: City. provinces, cities autonomous administrative units. Gun: County. Counties rural areas smaller populations (<50,000). Gu: District. Districts urban areas within metropolitan cities (districts called autonomous districts), whereas districts autonomous cities called non-autonomous districts. Eup-Myeon-Dong: third level, includes town districts. Aggregating Eupmyeondong data Sigungu level Handling administrative boundary changes Exercise: Calculate population-weighted PM2.5 exposure Sigungu Seoul","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v01_intro.html","id":"urban-development-analysis","dir":"Articles","previous_headings":"1. Understanding Korean Geographic Hierarchies","what":"2. Urban Development Analysis","title":"Introduction to tidycensuskr","text":"Tracking population changes across census years Identifying rapidly growing Eupmyeondong New town development patterns Exercise: Analyse population shifts Seoul Metropolitan Area (수도권)","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v02_examples_with_ggplot.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Examples with ggplot2","text":"can use censuskor dataset spatial data different years. , load census data spatial data 2010, 2015, 2020. load_districts() function retrieves spatial data specified year.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v02_examples_with_ggplot.html","id":"plot-1-income-vs-mortality","dir":"Articles","previous_headings":"","what":"Plot 1: Income vs Mortality","title":"Examples with ggplot2","text":"","code":"df_wide <-   df_wide %>%   mutate(Seoul = if_else(adm1 %in% c(\"Seoul\", \"Incheon\", \"Gyeonggi-do\"), 1L, 0L))  ggplot(df_wide, aes(x = labor, y = mortality)) +   geom_point(aes(color = factor(Seoul)), size = 3, alpha = 0.7) +   scale_color_manual(     values = c(\"0\" = \"#9E9E9E\", \"1\" = \"#E41A1C\"),     labels = c(\"Other regions\", \"Seoul Metropolitan Area\"),     name   = NULL   ) +   labs(     title = \"Mortality rate by income tax level in South Korea (2020)\",     x = \"Total Income Tax (million KWR)\",     y = \"Mortality rate (per 100k population)\"   ) +   theme_bw() ## Warning: Removed 37 rows containing missing values or values outside the scale range ## (`geom_point()`)."},{"path":[]},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v02_examples_with_ggplot.html","id":"plot-2-1-sex-ratio-distribution-in-sma","dir":"Articles","previous_headings":"Plot 2","what":"Plot 2-1: Sex Ratio Distribution in SMA","title":"Examples with ggplot2","text":"","code":"df_wide_seoul <-   df_wide %>%   filter(Seoul == 1) %>%    mutate(sex_ratio = male / female * 100)  ggplot(df_wide_seoul, aes(x = sex_ratio, fill = adm1)) +   geom_histogram(alpha = 0.7, position = \"identity\", bins = 30) +   scale_fill_manual(values = c(\"Seoul\" = \"darkorange\", \"Incheon\" = \"purple\", \"Gyeonggi-do\"=\"cyan4\")) +   labs(     x = \"Sex ratio (male per 100 female)\",     y = \"Frequency\",     title = \"Sex ratio distribution in Seoul Metropolitan Area (2020)\"   ) +   theme_bw()"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v02_examples_with_ggplot.html","id":"plot-2-2-sex-ratio-distribution-in-sma-2","dir":"Articles","previous_headings":"Plot 2","what":"Plot 2-2: Sex Ratio Distribution in SMA 2","title":"Examples with ggplot2","text":"","code":"bg_all <- df_wide_seoul %>% select(sex_ratio)  ggplot() +   # 1) background distribution   geom_histogram(     data = bg_all, aes(x = sex_ratio, y = after_stat(density)),     bins = 20, fill = \"grey80\", color = NA   ) +   # 2) regional distribution   geom_histogram(     data = df_wide_seoul, aes(x = sex_ratio, y = after_stat(density), fill = adm1),     bins = 20, alpha = 0.7, color = NA, position = \"identity\"   ) +   facet_wrap(~ adm1, ncol = 3) +   scale_fill_manual(values = c(     \"Seoul\" = \"darkorange\", \"Incheon\" = \"purple\", \"Gyeonggi-do\"= \"cyan4\")) +   labs(     title = \"Sex ratio distribution by region (SMA, 2020)\",     x = \"Sex ratio (male per 100 female)\",     y = \"Density\"   ) +   theme_bw()"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v02_examples_with_ggplot.html","id":"plot-3-choropleth-map","dir":"Articles","previous_headings":"","what":"Plot 3: choropleth map","title":"Examples with ggplot2","text":"","code":"adm2_sf_2020 <- load_districts(year = 2020) adm2_sf_2020_seoul <- adm2_sf_2020 %>% inner_join(df_wide_seoul, by = \"adm2_code\")  ggplot(adm2_sf_2020_seoul) +   geom_sf(aes(fill = sex_ratio), color = \"gray80\") +   theme_void() +   scale_fill_gradient2(     low = \"red\", mid = \"white\", high = \"blue\",      midpoint = 100,      name = \"Sex ratio\\n(male per 100 female)\"   ) +   labs(     title = \"Sex ratio in Seoul Metropolitan Area (2020)\",     color = \"ADM1\"   ) adm2_sf_2020 <- load_districts(year = 2020) adm2_sf_2020_kr <- adm2_sf_2020 %>%   inner_join(df_wide, by = \"adm2_code\") %>%    mutate(sex_ratio = male / female * 100)  ggplot(adm2_sf_2020_kr) +   geom_sf(aes(fill = sex_ratio), color = \"gray80\") +   theme_void() +   scale_fill_gradient2(     low = \"red\", mid = \"white\", high = \"blue\",      midpoint = 100,      name = \"Sex ratio\\n(male per 100 female)\"   ) +   labs(     title = \"Sex ratio (2020)\",     color = \"ADM1\"   )"},{"path":[]},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v02_examples_with_ggplot.html","id":"filter-and-merge-data","dir":"Articles","previous_headings":"Plot 4: Mapping total population in all districts","what":"Filter and Merge Data","title":"Examples with ggplot2","text":"","code":"# Load spatial data for 2010, 2015, and 2020 sf_2010 <- load_districts(year = 2010) sf_2015 <- load_districts(year = 2015) sf_2020 <- load_districts(year = 2020) # Filter censuskor data population_2010 <- censuskor %>%   filter(year == 2010, type == \"population\", class1 == \"total\", class2 == \"total\") population_2015 <- censuskor %>%   filter(year == 2015, type == \"population\", class1 == \"total\", class2 == \"total\") population_2020 <- censuskor %>%   filter(year == 2020, type == \"population\", class1 == \"total\", class2 == \"total\")  # Merge with spatial data sf_2010_merged <- sf_2010 %>%   left_join(population_2010, by = \"adm2_code\")  sf_2015_merged <- sf_2015 %>%   left_join(population_2015, by = \"adm2_code\")  sf_2020_merged <- sf_2020 %>%   left_join(population_2020, by = \"adm2_code\")"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v02_examples_with_ggplot.html","id":"create-maps","dir":"Articles","previous_headings":"Plot 4: Mapping total population in all districts","what":"Create Maps","title":"Examples with ggplot2","text":"value field universal field censuskor dataset contains data values. can use field create maps year.","code":"# Palette fill_cols <- c(\"#F8B195\", \"#F67280\", \"#C06C84\", \"#6C5B7B\", \"#355C7D\")   # Map for 2010 map_2010 <- ggplot(data = sf_2010_merged) +   geom_sf(aes(fill = value)) +   labs(title = \"Total Population (2010)\") +   scale_fill_gradientn(colors = fill_cols) +   theme_minimal()  # Map for 2015 map_2015 <- ggplot(data = sf_2015_merged) +   geom_sf(aes(fill = value)) +   labs(title = \"Census Map 2015\") +   scale_fill_gradientn(colors = fill_cols) +   theme_minimal()  # Map for 2020 map_2020 <- ggplot(data = sf_2020_merged) +   geom_sf(aes(fill = value)) +   labs(title = \"Census Map 2020\") +   scale_fill_gradientn(colors = fill_cols) +   theme_minimal()  # Print maps map_2010 map_2015 map_2020"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"vignette demonstrates clean transform raw Korean census data Korean Statistical Information Service (KOSIS) API tidy, analysis-ready format. existing R packages accessing Korean statistical data (kosis package general KOSIS data access), currently readily available software solutions specifically designed retrieving processing Korean census data tidy, analysis-friendly format demographic socioeconomic research.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"the-challenge","dir":"Articles","previous_headings":"Introduction","what":"The Challenge","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"Korean census administrative data presents several challenges researchers: Complex API URLs: KOSIS APIs require detailed parameter specifications cryptic codes Multiple data sources: Different datasets (population, tax, mortality) come different API endpoints Inconsistent formatting: Raw data often comes wide format Korean-language column names Administrative code mapping: Different datasets use different administrative code systems Data integration: Combining multiple datasets requires careful matching administrative units vignette shows tidycensuskr package addresses challenges providing pre-processed, tidy datasets demonstrating underlying data cleaning workflow.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"raw-data-sources","dir":"Articles","previous_headings":"","what":"Raw Data Sources","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"data cleaning process involves retrieving data multiple KOSIS API endpoints: need know following information retrieve data KOSIS API: API Key: need register API key KOSIS. API Parameters: API endpoint requires specific parameters itmId, objL1, objL2, etc. parameters define data want retrieve. Output Format: API supports various output formats, use JSON easier processing R.","code":""},{"path":[]},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"data-variables","dir":"Articles","previous_headings":"Raw Data Sources","what":"Data variables","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"note, output can include following variables: worth noting fields character, numeric values stored strings. means need convert numeric types loading data.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"api-key","dir":"Articles","previous_headings":"Raw Data Sources","what":"API Key","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"use KOSIS API, need register API key. can obtain one visiting KOSIS API registration page following instructions. webpage available Korean may available outside Korea.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"example-url","dir":"Articles","previous_headings":"Raw Data Sources","what":"Example URL","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"URL example retrieve general tax data KOSIS. need replace 인증키없음 actual API key. Dissecting URL can help understand construct API calls. Adding context, multiple values objL1 itmId can specified separating plus sign (+). example, itmId=T001+T002+T003 retrieve data multiple items. Try interpreting following URL understand construct API calls:","code":"url_tax_general <-    \"https://kosis.kr/openapi/Param/statisticsParameterData.do?method=getList&apiKey=인증키없음&itmId=T001+&objL1=A0201+A0202+A0203+A0204+A0205+A0206+A0207+A0208+A0209+A0210+A0211+A0212+A0213+A0214+A0215+A0216+A0217+A0218+A0219+A0220+A0221+A0222+A0223+A0224+A0225+A0301+A0302+A0303+A0304+A0305+A0306+A0307+A0308+A0309+A0310+A0401+A0402+A0403+A0404+A0405+A0406+A0407+A0408+A0409+A0410+A0411+A0412+A0413+A0414+A0415+A0416+A0417+A0418+A0419+A0420+A0421+A0422+A0423+A0424+A0425+A0426+A0427+A0428+A0429+A0430+A0431+A0501+A0502+A0503+A0504+A0505+A0506+A0507+A0508+A0509+A0510+A0511+A0512+A0513+A0514+A0515+A0516+A0517+A0518+A0601+A0602+A0603+A0604+A0605+A0701+A0702+A0703+A0704+A0705+A0706+A0707+A0708+A0709+A0710+A0711+A0801+A0802+A0803+A0804+A0805+A0806+A0807+A0808+A0809+A0810+A0811+A0812+A0813+A0814+A0815+A09+A1001+A1002+A1003+A1004+A1005+A1101+A1102+A1103+A1104+A1105+A1106+A1107+A1108+A1109+A1110+A1111+A1112+A1113+A1114+A1201+A1202+A1203+A1204+A1205+A1206+A1207+A1208+A1209+A1210+A1211+A1212+A1213+A1214+A1215+A1216+A1217+A1218+A1219+A1220+A1221+A1222+A1309+A1301+A1302+A1303+A1304+A1305+A1306+A1307+A1308+A1401+A1402+A1403+A1404+A1405+A1406+A1407+A1408+A1409+A1410+A1411+A1412+A1413+A1414+A1415+A1416+A1417+A1418+A1419+A1420+A1421+A1422+A1423+A1501+A1502+A1503+A1504+A1505+A1506+A1507+A1508+A1509+A1510+A1511+A1512+A1513+A1514+A1515+A1516+A1601+A1602+A1603+A1604+A1605+A1701+A1702+A1703+A1704+A1705+A1706+A1707+A1708+A1709+A1710+A1711+A1712+A1713+A1714+A1715+A1716+A1717+A1718+A1802+A1801+&objL2=15133SGH0M+&objL3=&objL4=&objL5=&objL6=&objL7=&objL8=&format=json&jsonVD=Y&prdSe=Y&newEstPrdCnt=1&outputFields=TBL_ID+TBL_NM+OBJ_ID+OBJ_NM+OBJ_NM_ENG+NM+NM_ENG+ITM_ID+ITM_NM+ITM_NM_ENG+UNIT_NM+UNIT_NM_ENG+&orgId=133&tblId=DT_133N_A3212\" url_pop <-   \"https://kosis.kr/openapi/Param/statisticsParameterData.do?method=getList&apiKey=인증키없음&itmId=T00+T60+&objL1=11010+11020+11030+11040+11050+11060+11070+11080+11090+11100+11110+11120+11130+11140+11150+11160+11170+11180+11190+11200+11210+11220+11230+11240+11250+21010+21020+21030+21040+21050+21060+21070+21080+21090+21100+21110+21120+21130+21140+21150+21510+22010+22020+22030+22040+22050+22060+22070+22510+22520+23010+23020+23030+23040+23050+23060+23070+23080+23090+23510+23520+24010+24020+24030+24040+24050+25010+25020+25030+25040+25050+26010+26020+26030+26040+26510+29010+31010+31011+31012+31013+31014+31020+31021+31022+31023+31030+31040+31041+31042+31050+31051+31052+31053+31060+31070+31080+31090+31091+31092+31100+31101+31103+31104+31110+31120+31130+31140+31150+31160+31170+31180+31190+31191+31192+31193+31200+31210+31220+31230+31240+31250+31260+31270+31280+31550+31570+31580+32010+32020+32030+32040+32050+32060+32070+32510+32520+32530+32540+32550+32560+32570+32580+32590+32600+32610+33020+33030+33040+33041+33042+33043+33044+33520+33530+33540+33550+33560+33570+33580+33590+34010+34011+34012+34020+34030+34040+34050+34060+34070+34080+34510+34530+34540+34550+34560+34570+34580+35010+35011+35012+35020+35030+35040+35050+35060+35510+35520+35530+35540+35550+35560+35570+35580+36010+36020+36030+36040+36060+36510+36520+36530+36550+36560+36570+36580+36590+36600+36610+36620+36630+36640+36650+36660+36670+36680+37010+37011+37012+37020+37030+37040+37050+37060+37070+37080+37090+37100+37510+37520+37530+37540+37550+37560+37570+37580+37590+37600+37610+37620+37630+38030+38050+38060+38070+38080+38090+38100+38110+38111+38112+38113+38114+38115+38510+38520+38530+38540+38550+38560+38570+38580+38590+38600+39010+39020+&objL2=ALL&objL3=000+&objL4=&objL5=&objL6=&objL7=&objL8=&format=json&jsonVD=Y&prdSe=Y&newEstPrdCnt=1&outputFields=TBL_ID+TBL_NM+OBJ_ID+OBJ_NM+OBJ_NM_ENG+NM+NM_ENG+ITM_ID+ITM_NM+ITM_NM_ENG+UNIT_NM+UNIT_NM_ENG+&orgId=101&tblId=DT_1IN1509\""},{"path":[]},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"setting-up-api-access","dir":"Articles","previous_headings":"Data Retrieval","what":"Setting up API Access","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"","code":"library(tidycensuskr) library(dplyr) library(tidyr) library(kosis)  # Set KOSIS API key (stored in a secure file) kosiskey <- readLines(\"~/.kosiskey\")[1] tidycensuskr::set_kosis_key(\"~/.kosiskey\")"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"downloading-raw-data","dir":"Articles","previous_headings":"Data Retrieval","what":"Downloading Raw Data","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"","code":"# Download raw datasets from KOSIS API df_tax <- kosis::getStatDataFromURL(url_tax_general)  # Load administrative district lookup table sgg_lookup <-   read.csv(     system.file(       file.path(\"extdata\", \"lookup_district_code.csv\"),       package = \"tidycensuskr\"     ),     fileEncoding = \"EUC-KR\"   )"},{"path":[]},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"administrative-code-mapping","dir":"Articles","previous_headings":"Data Cleaning Workflow","what":"1. Administrative Code Mapping","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"first challenge creating consistent mapping different administrative code systems used across datasets:","code":"# Create administrative code mapping for provinces (sido) sidocd_range <- tibble::tribble(   ~sido_kr, ~sido_cd, ~sido_txcd,   \"서울특별시\", \"11\", \"02\",   \"부산광역시\", \"21\", \"15\",    \"대구광역시\", \"22\", \"13\",   \"인천광역시\", \"23\", \"03\",   \"광주광역시\", \"24\", \"10\",   \"대전광역시\", \"25\", \"06\",   \"울산광역시\", \"26\", \"16\",   \"세종특별자치시\", \"29\", \"09\",   \"경기도\", \"31\", \"04\",   \"강원특별자치도\", \"32\", \"05\",   \"충청북도\", \"33\", \"07\",   \"충청남도\", \"34\", \"08\",   \"전라북도\", \"35\", \"11\",   \"전라남도\", \"36\", \"12\",   \"경상북도\", \"37\", \"14\",   \"경상남도\", \"38\", \"17\",   \"제주특별자치도\", \"39\", \"18\" )"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"tax-data-processing","dir":"Articles","previous_headings":"Data Cleaning Workflow","what":"2. Tax Data Processing","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"Transform raw tax data standardized format:","code":"df_tax_compact <- df_tax %>%   dplyr::transmute(     adm2_code = C1,           # Administrative code     value = DT   # Tax value in million KRW   ) %>%   dplyr::inner_join(     sgg_lookup[, c(\"sgg_tax_global\", \"sido_en\", \"sigungu_1_en\", \"adm2_code\")],     multiple = \"first\"   )"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"population-data-processing","dir":"Articles","previous_headings":"Data Cleaning Workflow","what":"3. Population Data Processing","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"Clean reshape population data gender disaggregation:","code":"df_pop2 <- df_pop %>%   dplyr::mutate(     sex = plyr::mapvalues(C2, c(0, 1, 2), c(\"total\", \"male\", \"female\")),     type = plyr::mapvalues(ITM_ID, c(\"T00\", \"T60\"), c(\"population_total\", \"population_nonrelative\"))   ) %>%   dplyr::select(C1, C1_NM, sex, type, DT) %>%   tidyr::pivot_wider(     names_from = c(type, sex),     values_from = DT   ) %>%   dplyr::rename(     sigungu_cd = C1,     sigungu_kr = C1_NM   ) %>%   dplyr::mutate(     adm2_code = as.integer(adm2_code)   ) %>%   dplyr::inner_join(     sgg_lookup[, c(\"adm2_code\", \"sido_en\", \"sigungu_1_en\")],     by = \"adm2_code\",     multiple = \"first\"   )"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"transforming-to-tidy-format","dir":"Articles","previous_headings":"","what":"Transforming to Tidy Format","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"key feature tidycensuskr converting wide-format, multiple-dataset structure single, long-format tidy dataset:","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"convert-each-dataset-to-long-format","dir":"Articles","previous_headings":"Transforming to Tidy Format","what":"1. Convert Each Dataset to Long Format","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"","code":"# Tax data to long format df_tax_long <- df_tax_compact %>%   dplyr::select(2:5) %>%   tidyr::pivot_longer(     cols = \"value\"   ) %>%   dplyr::mutate(     type = \"tax\",     class1 = \"global\",     class2 = \"total\",     unit = \"million KRW\"   ) %>%   dplyr::select(-name)  # Population data to long format df_pop_long <- df_pop2 %>%   dplyr::select(-2) %>%   tidyr::pivot_longer(     cols = 2:7   ) %>%   tidyr::separate(col = \"name\", into = c(\"type\", \"class1\", \"class2\"), sep = \"_\")"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"combine-into-single-tidy-dataset","dir":"Articles","previous_headings":"Transforming to Tidy Format","what":"2. Combine into Single Tidy Dataset","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"","code":"# Bind all datasets into one comprehensive long-format dataset censuskor <- dplyr::bind_rows(     df_tax_long,     df_pop_long   ) %>%   dplyr::rename(     adm1 = sido_en,     adm2 = sigungu_1_en   ) %>%   dplyr::mutate(     year = 2020   ) %>%   dplyr::select(     year, adm1, adm2, adm2_other, adm2_code,     type, class1, class2, unit, value   )"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"the-result-a-tidy-dataset","dir":"Articles","previous_headings":"","what":"The Result: A Tidy Dataset","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"final censuskor dataset consistent structure: year: Census year (2020) adm1: Province-level administrative name (English) adm2: District-level administrative name (English) adm2_code: Numeric administrative code type: Data type (“population”, “tax”, “mortality”) class1: First-level classification (e.g., “global”, “income”, “causes”) class2: Second-level classification (e.g., “total”, “male”, “female”) unit: Unit measurement value: Numeric value","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"example-usage","dir":"Articles","previous_headings":"The Result: A Tidy Dataset","what":"Example Usage","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"data can joined sf objects bundled package make maps perform spatial analysis","code":"library(tidycensuskr) library(dplyr)  # Load the cleaned dataset data(censuskor)  # View the structure head(censuskor)  # Filter for Seoul population data seoul_pop <- censuskor %>%   filter(adm1 == \"Seoul\", type == \"population\", class1 == \"population\") %>%   select(adm2, class2, value) %>%   pivot_wider(names_from = class2, values_from = value)  head(seoul_pop)"},{"path":"https://sigmafelix.github.io/tidycensuskr/articles/v04_data_cleaning_kosis.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Data Cleaning: From KOSIS Raw Data to Tidy Format","text":"tidycensuskr fills specific need cleaned, tidy, analysis-ready Korean census administrative data. extensive data cleaning workflow demonstrated vignette transforms complex, multilingual, multi-format raw data consistent, research-friendly format follows tidy data principles. Note: vignette shows data cleaning process educational purposes. actual censuskor dataset package result workflow ready immediate use.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Insang Song. Author, maintainer. Sohyun Park. Author, contributor. Hyesop Shin. Author, contributor.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Song , Park S, Shin H (2025). tidycensuskr : 'anyflights'-like data access South Korea census administrative data. R package version 0.0.5.9000, https://github.com/sigmafelix/tidycensuskr.","code":"@Manual{,   title = {tidycensuskr : `anyflights`-like data access for South Korea census and administrative data},   author = {Insang Song and Sohyun Park and Hyesop Shin},   year = {2025},   note = {R package version 0.0.5.9000},   url = {https://github.com/sigmafelix/tidycensuskr}, }"},{"path":"https://sigmafelix.github.io/tidycensuskr/index.html","id":"what-is-the-package-for","dir":"","previous_headings":"","what":"`anyflights`-like data access for South Korea census and administrative data","title":"`anyflights`-like data access for South Korea census and administrative data","text":"aim creating tidycensuskr package make best use case South Korean boundaries, population socioeconomic information R users.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"`anyflights`-like data access for South Korea census and administrative data","text":"can install released version palmerpenguins CRAN : install development version, need GitHub account generate personal access token repo permissions. cloning repository, can also install package using:","code":"install.packages(\"tidycensuskr\") rlang::check_installed(\"remotes\") remotes::install_github(\"sigmafelix/tidycensuskr\", auth_token = \"__YOUR_GITHUB_TOKEN__\") devtools::install(quick = TRUE)"},{"path":"https://sigmafelix.github.io/tidycensuskr/index.html","id":"about-the-data","dir":"","previous_headings":"","what":"About the data","title":"`anyflights`-like data access for South Korea census and administrative data","text":"July 2025, package contains two datasets: Census corresponding geospatial data.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/index.html","id":"id_1-census","dir":"","previous_headings":"","what":"1. Census","title":"`anyflights`-like data access for South Korea census and administrative data","text":"curated dataset contain 250 rows long 8 variables. use function anycensus(), get information census years regions.","code":"head(census) #> # A tibble: 253 x 6 #>   adm1_code adm1_name adm2_code adm2_name   pop2015_total pop2015_men pop2015_women pop2020_total pop2020_men pop2020_women #>       <int> <chr>     <int>     <chr>               <int>       <int>         <int>         <int>       <int>         <int> #> 1        11 Seoul     11010     Jongno-gu          161521       79510         82011        151291       73062         78229 #> 2        11 Seoul     11020     Jung-gu            128478       63218         65260        128744       62147         66597 #> 3        11 Seoul     11030     Yongsan-gu         227282      109980        117302        225882      109162        116720 #> 4        11 Seoul     11040     Seongdong-gu       295006      146332        148674        291918      142128        149790 #> 5        11 Seoul     11050     Gwangjin-gu        368199      180647        187552        353967      169925        184042 #> 6        11 Seoul     11060     Dongdaemun-gu      364787      181189        183598        351057      171484        179573 # Say if you want to query Seoul's 2020 population # You can type in Seoul's district code, then the census year # You can retrieve the data using the simplify() function by changing the options to either a data frame or a list. seoul <- anycensus(11, 2020, simplify = \"df\")  # Quick visualisation plot_census_map(seoul, variable = \"population_density\")"},{"path":"https://sigmafelix.github.io/tidycensuskr/index.html","id":"anycensusk","dir":"","previous_headings":"","what":"anycensusk()","title":"`anyflights`-like data access for South Korea census and administrative data","text":"package loads attached dataset censuskor contains census data 2020. dataset automatically loaded upon loading package function anycensusk() allows query census data specific district province codes types data (population, tax, mortality) year 2020.","code":"library(tidycensuskr)  # loading Seoul population data tidycensuskr::anycensusk(codes = \"Seoul\", type = \"population\")"},{"path":"https://sigmafelix.github.io/tidycensuskr/index.html","id":"id_2-boundaries","dir":"","previous_headings":"","what":"2. Boundaries","title":"`anyflights`-like data access for South Korea census and administrative data","text":"Boundaries three census years (2010, 2015, 2020)see ?boundary_raw info.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"`anyflights`-like data access for South Korea census and administrative data","text":"can find code examples exploring census vignette(\"examples\")","code":"library(tidyverse) library(sf)  head(sgg) #> Simple feature collection with 251 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 746111 ymin: 1458603 xmax: 1387949 ymax: 2068444 #> Projected CRS: Korea 2000 / Unified CS #> # A tibble: 251 × 7 #>   BASE_DATE SIGUNGU_CD SIGUNGU_NM                  geom             adm1_code adm1_name adm2_name #>       <int>      <int> <chr>          <MULTIPOLYGON [m]>               <int> <chr>     <chr>     #> 1  20201231      11010 종로구  (((953683.8 1959210, 953…                  11 Seoul     Jongno-gu #> 2  20201231      11020 중구    (((957890.4 1952617, 957…                  11 Seoul     Jung-gu   #> 3  20201231      11030 용산구  (((953114.2 1950747, 953…                  11 Seoul     Yongsan-gu #> 4  20201231      11040 성동구  (((959381.8 1952724, 959…                  11 Seoul     Seongdong-gu #> 5  20201231      11050 광진구  (((964825.1 1952633, 964…                  11 Seoul     Gwangjin-gu #> 6  20201231      11060 동대문구 (((961991.8 1956626, 961…                  11 Seoul     Dongdaemun-gu"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Korean census data by admin code (province or municipality) and year — anycensus","title":"Query Korean census data by admin code (province or municipality) and year — anycensus","text":"Query Korean census data admin code (province municipality) year","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Korean census data by admin code (province or municipality) and year — anycensus","text":"","code":"anycensus(   codes = NULL,   year = 2020,   level = c(\"adm1\", \"adm2\"),   simplify = c(\"auto\", \"list\", \"df\") )"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Korean census data by admin code (province or municipality) and year — anycensus","text":"codes Integer character vector admin codes (e.g. 11, 26) admin names (e.g. \"Seoul\"). year Integer: one 2015 2020. level Character: \"adm1\" province-level \"adm2\" municipal-level. Defaults \"adm2\". simplify Character: \"auto\", \"list\", \"df\". Determines output format.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Korean census data by admin code (province or municipality) and year — anycensus","text":"named list tibbles, one element per requested code.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensusk.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Korean census data by admin code (province or municipality) and year — anycensusk","title":"Query Korean census data by admin code (province or municipality) and year — anycensusk","text":"function queries long format census data frame (censuskor) specific administrative codes (provided)","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensusk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Korean census data by admin code (province or municipality) and year — anycensusk","text":"","code":"anycensusk(   year = 2020,   codes = NULL,   type = c(\"population\", \"tax\", \"mortality\", \"economy\"),   level = c(\"adm1\", \"adm2\") )"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensusk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Korean census data by admin code (province or municipality) and year — anycensusk","text":"year integer(1). One 2010, 2015, 2020. codes integer character vector admin codes (e.g. 11, 26) admin names (e.g. \"Seoul\"). type character(1). \"population\", \"tax\", \"economy\" \"mortality\". Defaults \"population\". level character(1). \"adm1\" province-level \"adm2\" municipal-level. Defaults \"adm2\".","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensusk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Korean census data by admin code (province or municipality) and year — anycensusk","text":"data.frame object containing census data specified codes year.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/anycensusk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Korean census data by admin code (province or municipality) and year — anycensusk","text":"","code":"anycensusk(codes = \"21\", type = \"mortality\") #> # A tibble: 16 × 8 #>     year adm1  adm2         adm2_code type      `All causes_total_p1p` #>    <dbl> <chr> <chr>            <dbl> <chr>                      <dbl> #>  1  2020 Busan Jung-gu          21010 mortality                   398. #>  2  2020 Busan Seo-gu           21020 mortality                   395. #>  3  2020 Busan Dong-gu          21030 mortality                   372. #>  4  2020 Busan Yeongdo-gu       21040 mortality                   404. #>  5  2020 Busan Busanjin-gu      21050 mortality                   332. #>  6  2020 Busan Dongnae-gu       21060 mortality                   297. #>  7  2020 Busan Nam-gu           21070 mortality                   311. #>  8  2020 Busan Buk-gu           21080 mortality                   319. #>  9  2020 Busan Haeundae-gu      21090 mortality                   302. #> 10  2020 Busan Saha-gu          21100 mortality                   342. #> 11  2020 Busan Geumjeong-gu     21110 mortality                   322. #> 12  2020 Busan Gangseo-gu       21120 mortality                   290. #> 13  2020 Busan Yeonje-gu        21130 mortality                   297. #> 14  2020 Busan Suyeong-gu       21140 mortality                   294. #> 15  2020 Busan Sasang-gu        21150 mortality                   363. #> 16  2020 Busan Gijang-gun       21310 mortality                   329. #> # ℹ 2 more variables: `All causes_male_p1p` <dbl>, #> #   `All causes_female_p1p` <dbl>"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/census.html","id":null,"dir":"Reference","previous_headings":"","what":"South Korean Census in year 2015 and 2020 — census","title":"South Korean Census in year 2015 and 2020 — census","text":"Census sigungu.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"South Korean Census in year 2015 and 2020 — census","text":"","code":"census"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/census.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"South Korean Census in year 2015 and 2020 — census","text":"data frame 253 rows 11 variables: adm1_code Code province-level (Sido) administrative unit, defined KOSIS (Korean Statistical Information Service) adm1_name Name province-level (Sido) administrative unit, defined KOSIS adm2_code Code municipal-level (Sigungu) administrative unit, defined KOSIS; nested within adm1 adm2_name Name municipal-level (Sigungu) administrative unit, defined KOSIS pop2015_total Total population according 2015 Census pop2015_men Male population according 2015 Census pop2015_women Female population according 2015 Census pop2020_total Total population according 2020 Census pop2020_men Male population according 2020 Census pop2020_women Female population according 2020 Census","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/census.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"South Korean Census in year 2015 and 2020 — census","text":"KOSIS","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/censuskor.html","id":null,"dir":"Reference","previous_headings":"","what":"South Korea Census Data — censuskor","title":"South Korea Census Data — censuskor","text":"District level data including tax, population, business entities, mortality South Korea.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/censuskor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"South Korea Census Data — censuskor","text":"","code":"censuskor"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/censuskor.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"South Korea Census Data — censuskor","text":"data frame 4410 rows 9 variables: adm1 Name province-level (Sido) administrative unit adm2 Name district/municipal-level (Sigungu) administrative unit adm2_code Code district/municipal-level (Sigungu) administrative unit type Type variable, e.g., \"tax\", \"population\", \"mortality\" class1 First-level classification variable depending type class2 Second-level classification variable depending type unit Unit measurement variable value Value variable year Year census data, e.g., 2010, 2015, 2020","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/censuskor.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"South Korea Census Data — censuskor","text":"KOSIS (Korean Statistical Information Service)","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/censuskor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"South Korea Census Data — censuskor","text":"temporal comparison, province names adm1 field standardized common names suffix metropolitan cities \"-\" suffix provinces. example, \"Seoul\" instead \"Seoul Metropolitan City\", \"Jeollabuk-\" instead \"Jeonbuk State\".","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/load_districts.html","id":null,"dir":"Reference","previous_headings":"","what":"Load sf district polygons — load_districts","title":"Load sf district polygons — load_districts","text":"Load sf district polygons","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/load_districts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load sf district polygons — load_districts","text":"","code":"load_districts(year = 2020)"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/load_districts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load sf district polygons — load_districts","text":"year integer(1). census year load. Defaults 2020.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/load_districts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load sf district polygons — load_districts","text":"sf object containing district polygons.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/load_districts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load sf district polygons — load_districts","text":"function loads district polygons specified year package's extdata directory. polygons stored RDS file read using readRDS function. polygons Simple Features (sf) format, suitable spatial data analysis R. polygons include following attributes: year: census year (e.g., 2020). adm2_code: administrative code district.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/load_districts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load sf district polygons — load_districts","text":"","code":"library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE sf_use_s2(FALSE) #> Spherical geometry (s2) switched off sf_2020 <- load_districts(year = 2020)"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/set_kosis_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Set KOSIS API Key from a File — set_kosis_key","title":"Set KOSIS API Key from a File — set_kosis_key","text":"function reads KOSIS API key specified file sets use KOSIS API calls.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/set_kosis_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set KOSIS API Key from a File — set_kosis_key","text":"","code":"set_kosis_key(file)"},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/set_kosis_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set KOSIS API Key from a File — set_kosis_key","text":"file character string specifying path file containing KOSIS API key.","code":""},{"path":"https://sigmafelix.github.io/tidycensuskr/reference/set_kosis_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set KOSIS API Key from a File — set_kosis_key","text":"file contain API key single line text. file exist, error raised.","code":""},{"path":[]},{"path":"https://sigmafelix.github.io/tidycensuskr/news/index.html","id":"id_005-development-version","dir":"Changelog","previous_headings":"","what":"0.0.5","title":"tidycensuskr (development version)","text":"censuskor layout updated include year data frame.","code":""}]
